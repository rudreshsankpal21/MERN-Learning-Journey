***********    BUILT-IN VALIDATORS    **************

// design schema
const userProfileSchema = new mongoose.Schema(
  {
    userName: {
      type: String,
      required: [true, "Username required"],
      unique: true,
      minLength: 2,
      maxLength: 15,
    },
    email: {
      type: String,
      required: [true, "Email required"],
      match: /@/, // it must contain @ sign
    },
    age: {
      type: Number,
      required: [true, "Age is  required"],
      min: 16,
      max: 80,
    },
    gender: {
      type: String,
      enum: ["Male", "Female", "Other"],
      default: "Other",
    },
  },
  {
    timestamps: true,
  }
);

// compile the schema to form model
const User = mongoose.model("User", userProfileSchema); // Model

const createDoc = async () => {
  try {
    const userCreated = await User.create({
      userName: "Rudresh",
      gender: "Male",
      age: 18,
      email: "rudreshsankpal21@gmail.com",
    });
    console.log(userCreated);
  } catch (error) {
    console.log(error);
  }
};

createDoc();
***********XXXXXXXXXX**************



***********    CUSTOM VALIDATORS    **************

// design schema
const userProfileSchema = new mongoose.Schema(
  {
    userName: {
      type: String,
      required: [true, "Username required"],
      validate: {
        validator: function (value) {
          return /^[a-zA-Z0-9]+$/.test(value); // custom validator
        },
        message: "Username can only contain alphanumeric character",
      },
    },
    email: {
      type: String,
      required: [true, "Email required"],
      validate: {
        validator: function (value) {
          return value.endsWith("@gmail.com"); // custom validator
        },
        message: "Email must be from domain @gmail.com",
      },
    },
  },
  {
    timestamps: true,
  }
);

// compile the schema to form model
const User = mongoose.model("User", userProfileSchema); // Model

const createDoc = async () => {
  try {
    const userCreated = await User.create({
      userName: "RudreshSankpal",

      email: "rudreshsankpal21@gmail.com",
    });
    console.log(userCreated);
  } catch (error) {
    console.log(error);
  }
};

createDoc();

***********XXXXXXXXXX**************

***********    THIRD PARTY VALIDATORS    **************
const validator = require("validator");

// design schema
const userProfileSchema = new mongoose.Schema(
  {
    age: {
      type: String,
      required: [true, "Age required"],
      validate: {
        validator: (value) => {
          return validator.isInt(value, { min: 16, max: 80 });
        },
        message: "Entered age category is not valid",
      },
    },
    email: {
      type: String,
      required: [true, "Email required"],
      validate: {
        validator: (value) => {
          return validator.isEmail(value);
        },
        message: "Invalid email",
      },
    },
  },
  {
    timestamps: true,
  }
);

// compile the schema to form model
const User = mongoose.model("User", userProfileSchema); // Model

const createDoc = async () => {
  try {
    const userCreated = await User.create({
      age: "40",

      email: "rudreshsankpal21@gmail.com",
    });
    console.log(userCreated);
  } catch (error) {
    console.log(error);
  }
};

createDoc();
***********XXXXXXXXXX**************


***********    Setters and Getters    **************

// design schema
const bookSchema = new mongoose.Schema(
  {
    title: {
      type: String,
      required: true,
      set: (val) => val.trim(),
    },
    author: {
      type: String,
      required: true,
      set: (val) => val.trim(),
    },
    price: {
      type: String,
      required: true,
      set: (val) => Math.round((val * 100) / 100), // rounding to 2 decimal
    },
    tags: {
      type: [String],
      required: true,
      set: (val) => val.map((tag) => tag.toLowerCase()),
    },
    url: {
      type: String,
      required: true,
      set: (val) => `https://rudresh.com/books/${val}`,
    },
  },
  { timestamps: true }
);

// compile the schema to form model
const Book = mongoose.model("Book", bookSchema); // Model

const createDoc = async () => {
  try {
    const BookCreated = await Book.create({
      title: "The psychology of money",
      author: "Rudresh sankpal",
      price: 50.994434,
      tags: ["MONEY", "PSYCHOLOGY", "INTELLIGENCE", "MINDSET"],
      url: "money-for-everyone",
    });
    console.log(BookCreated);
  } catch (error) {
    console.log(error);
  }
};

createDoc();
***********XXXXXXXXXX**************
