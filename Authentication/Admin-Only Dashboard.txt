const express = require("express");
const app = express();
const cookieParser = require("cookie-parser");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const PORT = 3000;
// connect to mongoose
mongoose
  .connect(
    "MONGOURL"
  )
  .then(console.log("DB has been connected"))
  .catch((e) => {
    console.log(e);
  });

// create the user schema
const userSchema = new mongoose.Schema(
  {
    username: String,
    password: String,
    role: {
      type: String,
      default: "user",
    },
  },
  {
    timestamps: true,
  }
);
//compile the schema to form model
const User = mongoose.model("User", userSchema);
app.set("view engine", "ejs");
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// Custom middlewares
//isAuthenticated middleware
const isAuthenticated = (req, res, next) => {
  //Check the user in the cookies
  const userDataCookie = req.cookies.userData;
  try {
    const userData = userDataCookie && JSON.parse(userDataCookie);
    if (userData && userData.username) {
      // Add the login user to the req object
      req.userData = userData;
      return next();
    } else {
      res.send("You are not logged in");
    }
  } catch (error) {
    console.log(error);
  }
};

//Is Admin middleware for authorization
const isAdmin = (req, res, next) => {
  if (req.userData && req.userData.role === "admin") {
    return next();
  } else {
    res.send("Forbidden:You dont have access");
  }
};

app.get("/", (req, res) => {
  res.render("home");
});

app.get("/login", (req, res) => {
  res.render("login");
});

// Register route
app.get("/register", (req, res) => {
  res.render("register");
});

//Admin Route
app.get("/admin-only", isAuthenticated, isAdmin, (req, res) => {
  // we have access to the login user as req.userData
  res.render("admin");
});

//Register logic
app.post("/register", async (req, res) => {
  //Destructure the req.body
  const { username, password } = req.body;
  const hashedPass = await bcrypt.hash(password, 10);
  try {
    const newUser = await User.create({
      username,
      password: hashedPass,
    });
    // Redirect user to login
    res.redirect("login");
  } catch (error) {}
});

app.post("/login", async (req, res) => {
  // 1. Find the user in the DB
  const { username, password } = req.body;
  const userFound = await User.findOne({
    username,
  });
  // 2. Create some cookies
  if (userFound && (await bcrypt.compare(password, userFound.password))) {
    //**Prepare the login user data **//
    //Setting the cookie with the userData
    res.cookie(
      "userData",
      JSON.stringify({ username: userFound.username, role: userFound.role }),
      {
        maxAge: 3 * 24 * 60 * 1000, // 3days expiration
        httpOnly: true,
        secure: false,
        sameSite: "strict",
      }
    );
    res.redirect("/dashboard");
  } else {
    res.send("Invalid login credentials");
  }
});

app.get("/dashboard", (req, res) => {
  // Grab the user from the cookie
  const userData = req.cookies.userData
    ? JSON.parse(req.cookies.userData)
    : null;

  const username = userData ? userData.username : null;

  // Render the template
  if (username) {
    res.render("dashboard", { username });
  }
  // Redirect to login
  else {
    res.redirect("/login");
  }
});

app.get("/logout", (req, res) => {
  // logout
  res.clearCookie("userData");
  res.redirect("/login");
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
